#1
"""
1) Realiza una funci칩n llamada area_rectangulo() que devuelva el 치rea del rect치ngulo a partir de una base y una altura. Calcula el 치rea de un rect치ngulo de 15 de base y 10 de altura

游둟 Ayuda: El 치rea de un rect치ngulo se obtiene al multiplicar la base por la altura.
"""

#Defino la funci칩n
def area_rectangulo(base, altura):
  # Defino como se calcula el 치rea
  return base*altura
  
#Ingreso los datos dados
base=15
altura=10

# Llamo la funcion con los argumentos indicados
area=area_rectangulo(base, altura)

# Imprimo la respuesta
print(f"El 치rea de un rect치ngulo de base {base} y altura {altura} es {area}")

#2
"""
2) Realiza una funci칩n llamada area_circulo() que devuelva el 치rea de un c칤rculo a partir de un radio. Calcula el 치rea de un c칤rculo de 5 de radio

游둟 Ayuda: El 치rea de un c칤rculo se obtiene al elevar el radio a dos y multiplicando el resultado por el n칰mero pi. Puedes utilizar el valor 3.14159 como pi o importarlo del m칩dulo math.
"""

# Importo pi
import math
#print(math.pi)


#Defino la funci칩n
def area_circulo(radio):

  # Defino como se calcula el 치rea
  return math.pi*(radio**2)
  
#Ingreso los datos dados
radio=5

# Llamo la funci칩n con el argumento indicado
area=area_circulo(radio)

# Imprimo la respuesta
print(f"El 치rea de un c칤rculo de radio {radio} es {area}")



#3
"""
3) Realiza una funci칩n llamada relacion() que a partir de dos n칰meros cumpla lo siguiente:

Si el primer n칰mero es mayor que el segundo, debe devolver 1. Si el primer n칰mero es menor que el segundo, debe devolver -1. Si ambos n칰meros son iguales, debe devolver un 0.

Comprueba la relaci칩n entre los n칰meros: '5 y 10', '10 y 5' y '5 y 5'
"""

#Defino la funci칩n
def relacion(n1, n2):
  #Establezco las condiciones y resultados:
  if n1>n2:
    return print("La relaci칩n es 1.")
  if n1<n2:
    return print("La relaci칩n es -1.")
  if n1==n2:
    return print("La relaci칩n es 0.")
  
# Pido que se ingresen los dos n칰meros
n1=int(input("Ingrese un n칰mero: "))
n2=int(input("Ingrese otro n칰mero: "))

# Llamo a la funci칩n para evaluar la relaci칩n entre los n칰meros
relacion(n1, n2)


#4
"""
4) Realiza una funci칩n llamada intermedio() que a partir de dos n칰meros, devuelva su punto intermedio:

游둟 Ayuda: El n칰mero intermedio de dos n칰meros corresponde a la suma de los dos n칰meros dividida entre 2

Comprueba el punto intermedio entre -12 y 24
"""

#Defino la funci칩n
def intermedio(n1, n2):
  # Defino como se calcula el punto intermedio
  return (n1+n2)/2
  
# Pido que se ingresen los dos n칰meros
n1=int(input("Ingrese un n칰mero: "))
n2=int(input("Ingrese otro n칰mero: "))

# Llamo a la funci칩n y lo guardo en una variable
punto=int(intermedio(n1, n2))

# Imprimo la respuesta
print(f"El punto intermedio entre {n1} y {n2} es {punto}.")


#5
"""
5) Realiz치 una funci칩n llamada recortar() que reciba tres par치metros. El primero es el n칰mero a recortar, el segundo es el l칤mite inferior y el tercero el l칤mite superior. La funci칩n tendr치 que cumplir lo siguiente:

Devolver el l칤mite inferior si el n칰mero es menor que 칠ste

Devolver el l칤mite superior si el n칰mero es mayor que 칠ste.

Devolver el n칰mero sin cambios si no se supera ning칰n l칤mite.

Comprueba el resultado de recortar 15 entre los l칤mites 0 y 10
"""


#Defino la funci칩n
def recortar(rec, inf, sup):
  # Establezco las reglas y los resultados correspondientes
  if rec<inf:
    return print(inf)
  if rec>sup:
    return print(sup)
  if rec>inf and rec<sup:
    return print(rec)
    
  
# Pido que se ingresen los tres n칰meros
rec=int(input("Ingrese un n칰mero a recortar: "))
inf=int(input("Ingrese el l칤mite inferior: "))
sup=int(input("Ingrese el l칤mite superior: "))

# Llamo a la funci칩n para que devuelva el resultado
recortar(rec, inf, sup)




#6
"""
6) Realiza una funci칩n separar() que tome una lista de n칰meros enteros y devuelva dos listas ordenadas. La primera con los n칰meros pares, y la segunda con los n칰meros impares:

游둟 Ayuda: Para ordenar una lista autom치ticamente puedes usar el m칠todo .sort()
"""

# Defino la funci칩n separar()
def separar(original):
  # Preparo la lista de pares:
  pares=[]
  # Preparo la lista de impares:
  impares=[]
  # Coloco cada valor de la lista original en la lista correspondiente
  for x in original:
    if x%2==0:
      pares.append(x)
    else:
      impares.append(x)
  # Ordeno las 2 listas
  pares.sort()
  impares.sort()
  # Imprimo las dos listas
  print(f"La lista de n칰meros pares, ordenados de menor a mayor, ingresados en la lista original es {pares}")
  print(f"La lista de n칰meros impares, ordenados de menor a mayor, ingresados en la lista original es {impares}")



# Creo la lista original vac칤a
original=[]

# Creo una variable que sea True mientras se est치n agregando datos a la lista original, y que cambie a False cuando ya no se quieran ingresar mas n칰meros
agregar=True
while agregar==True:
  # voy agregando datos
  entrada=input("Ingrese un n칰mero entero para agregar a la lista, o ingrese \"s\" para salir: ")
  # Si no quieren cargar m치s n칰meros:
  if entrada=="s":
    agregar=False
  # Si quieren cargar m치s n칰meros:
  else:
    # Que intente si son n칰meros
    try:
      # Transforma el string en int
      entero=int(entrada)
      # Agrega el int a la lista original
      original.append(entero)
    # Si no ingresaron ni una s ni un n칰mero:
    except:
      # Le devuelvo un mensaje de error
      print("El dato ingresado no es correcto. Por favor, int칠ntelo nuevamente.")
      pass

# Llamo a la funci칩n
separar(original)

